{"version":3,"sources":["redux/users/userTypes.ts","redux/users/userActions.ts","views/User.ts","views/UserList.tsx","redux/users/userReducer.ts","redux/rootReducer.ts","redux/store.ts","component/LinkedInIcon.tsx","component/GithubIcon.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FETCH_USERS_REQUEST","FETCH_USERS_SUCCESS","FETCH_USERS_FAILURE","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAILURE","fetchUsers","dispatch","type","axios","get","then","response","user","data","payload","catch","error","errorMessage","message","fetchUsersFailure","updateUser","updateUserSuccess","GenderOptions","Usercolumns","dataField","text","headerAlign","headerTitle","headerClasses","filter","textFilter","formatter","cell","selectFilter","options","editor","Type","SELECT","value","label","dateObj","Date","getUTCDate","slice","getUTCMonth","getUTCFullYear","DATE","connect","state","userData","props","useEffect","beforeSaveCell","oldValue","newValue","row","column","done","a","Container","fluid","style","marginTop","loading","className","Spinner","animation","variant","users","length","id","bootstrap4","keyField","columns","filterFactory","cellEdit","cellEditFactory","mode","blurToSave","initialState","userReducer","action","map","obj","Id","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","logger","thunk","LinkedInIcon","icon","faLinkedin","color","size","GithubIcon","faGithub","App","Navbar","bg","sticky","Brand","href","src","process","width","Nav","Link","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df555492.chunk.js","sourcesContent":["export const FETCH_USERS_REQUEST = 'FETCH_USERS_REQUEST';\r\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS';\r\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE';\r\n\r\nexport const UPDATE_USER_REQUEST = 'UPDATE_USER_REQUEST';\r\nexport const UPDATE_USER_SUCCESS = 'UPDATE_USER_SUCCESS';\r\nexport const UPDATE_USER_FAILURE = 'UPDATE_USER_FAILURE';","import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { User } from \"../../views/User\";\r\nimport {\r\n    FETCH_USERS_REQUEST,\r\n    FETCH_USERS_SUCCESS,\r\n    FETCH_USERS_FAILURE,\r\n    UPDATE_USER_REQUEST,\r\n    UPDATE_USER_SUCCESS,\r\n    UPDATE_USER_FAILURE,\r\n} from \"./userTypes\";\r\n\r\nexport const fetchUsersRequest = () => {\r\n    return {\r\n        type: FETCH_USERS_REQUEST\r\n    }\r\n}\r\n\r\nexport const fetchUsersSuccess = (users) => {\r\n    return {\r\n        type: FETCH_USERS_SUCCESS,\r\n        payload: users\r\n    }\r\n}\r\n\r\nexport const fetchUsersFailure = (error) => {\r\n    return {\r\n        type: FETCH_USERS_FAILURE,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport const updateUserRequest = () => {\r\n    return {\r\n        type: UPDATE_USER_REQUEST\r\n    }\r\n}\r\n\r\nexport const updateUserSuccess = (user) => {\r\n    return {\r\n        type: UPDATE_USER_SUCCESS,\r\n        payload: user\r\n    }\r\n}\r\n\r\nexport const updateUserFailure = (error) => {\r\n    return {\r\n        type: UPDATE_USER_FAILURE,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport const fetchUsers = () => {\r\n    return (dispatch) => {\r\n        dispatch(fetchUsersRequest());\r\n        axios.get('https://s5fjiu5l3b.execute-api.ap-southeast-2.amazonaws.com/dev/v1/user-management/user')\r\n            .then(response => {\r\n                const user = response.data;\r\n                dispatch(fetchUsersSuccess(user));\r\n            })\r\n            .catch(error => {\r\n                const errorMessage = error.message;\r\n                dispatch(fetchUsersFailure(errorMessage));\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateUser = (user: User) => {\r\n    return (dispatch) => {\r\n        dispatch(updateUserRequest());\r\n        dispatch(updateUserSuccess(user));\r\n    }\r\n}","import filterFactory, { textFilter, selectFilter } from 'react-bootstrap-table2-filter';\r\nimport cellEditFactory, { Type } from 'react-bootstrap-table2-editor';\r\n\r\nexport interface User {\r\n    Id: number,\r\n    FirstName: number,\r\n    LastName: number,\r\n    Age: number,\r\n    Avatar: string,\r\n    Gender: string,\r\n    DOB: Date\r\n}\r\n\r\nexport const GenderOptions = {\r\n    'M': 'Male',\r\n    'F': 'Female',\r\n};\r\n\r\nexport const Usercolumns = [\r\n    {\r\n        dataField: 'FirstName',\r\n        text: 'First Name',\r\n        headerAlign: 'left',\r\n        headerTitle: true,\r\n        headerClasses: 'bootstrap-table-header',\r\n        filter: textFilter(),\r\n    },\r\n    {\r\n        dataField: 'LastName',\r\n        text: 'Last Name',\r\n        headerAlign: 'left',\r\n        headerTitle: true,\r\n        headerClasses: 'bootstrap-table-header',\r\n        filter: textFilter(),\r\n    },\r\n    {\r\n        dataField: 'Age',\r\n        text: 'Age',\r\n        headerAlign: 'left',\r\n        headerTitle: true,\r\n        headerClasses: 'bootstrap-table-header',\r\n        filter: textFilter(),\r\n    },\r\n    {\r\n        dataField: 'Gender',\r\n        text: 'Gender',\r\n        headerAlign: 'left',\r\n        headerTitle: true,\r\n        headerClasses: 'bootstrap-table-header',\r\n        formatter: cell => GenderOptions[cell],\r\n        filter: selectFilter({\r\n            options: GenderOptions\r\n        }),\r\n        editor: {\r\n            type: Type.SELECT,\r\n            options: [{\r\n                value: 'M',\r\n                label: 'Male'\r\n            }, {\r\n                value: 'F',\r\n                label: 'Female'\r\n            }]\r\n        }\r\n    },\r\n    {\r\n        dataField: 'DOB',\r\n        text: 'Date of Birth',\r\n        headerClasses: 'bootstrap-table-header',\r\n        formatter: (cell) => {\r\n            let dateObj = cell;\r\n            if (typeof cell !== 'object') {\r\n                dateObj = new Date(cell);\r\n            }\r\n            return `${('0' + dateObj.getUTCDate()).slice(-2)}/${('0' + (dateObj.getUTCMonth() + 1)).slice(-2)}/${dateObj.getUTCFullYear()}`;\r\n        },\r\n        editor: {\r\n            type: Type.DATE\r\n        },\r\n    }\r\n];","import React, { Fragment, useState, FC } from \"react\";\r\nimport { useEffect } from \"react\"\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport filterFactory, { textFilter, selectFilter } from 'react-bootstrap-table2-filter';\r\nimport cellEditFactory, { Type } from 'react-bootstrap-table2-editor';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchUsers, updateUser } from \"../redux\";\r\nimport { User, Usercolumns } from \"./User\";\r\nimport Container from \"react-bootstrap/esm/Container\";\r\nimport Spinner from \"react-bootstrap/esm/Spinner\";\r\n\r\ninterface UserProps {\r\n    userData: any,\r\n    fetchUsers: () => void,\r\n    updateUser: (user: User) => void\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userData: state.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchUsers: () => dispatch(fetchUsers()),\r\n        updateUser: (user: User) => dispatch(updateUser(user))\r\n    }\r\n}\r\n\r\nconst UserList: FC<UserProps> = (props) => {\r\n    useEffect(() => {\r\n        props.fetchUsers();\r\n    }, []);\r\n\r\n    const containerStyle = { marginTop: 10 };\r\n\r\n    const beforeSaveCell = async (oldValue, newValue, row: User, column, done) => {\r\n        if(row[column.dataField] != newValue) {\r\n            row[column.dataField] = newValue;\r\n            props.updateUser(row);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid style={containerStyle}>\r\n            {\r\n                props.userData.loading ? (\r\n                    <div className=\"spinner-container\">\r\n                        <Spinner animation=\"border\" variant=\"warning\" />\r\n                        <div>Loading...</div>\r\n                    </div>\r\n                ) : (\r\n                        props.userData.error ? (\r\n                            <div>\r\n                                {props.userData.error}\r\n                            </div>\r\n                        ) : (\r\n                                <div>\r\n                                    {\r\n                                        !props.userData?.users?.length ? (\r\n                                            <h4>No records found!</h4>\r\n                                        ) : (\r\n                                                <BootstrapTable\r\n                                                    id=\"user-list\"\r\n                                                    bootstrap4={true}\r\n                                                    keyField='Id'\r\n                                                    data={props.userData.users}\r\n                                                    columns={Usercolumns}\r\n                                                    filter={filterFactory()}\r\n                                                    cellEdit={cellEditFactory(\r\n                                                        {\r\n                                                            mode: 'click',\r\n                                                            blurToSave: true,\r\n                                                            beforeSaveCell\r\n                                                        })\r\n                                                    }\r\n                                                />\r\n\r\n                                            )\r\n                                    }\r\n                                </div>\r\n                            )\r\n                    )\r\n            }\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserList);\r\n\r\n","import { User } from \"../../views/User\";\r\nimport {\r\n    FETCH_USERS_REQUEST,\r\n    FETCH_USERS_SUCCESS,\r\n    FETCH_USERS_FAILURE,\r\n    UPDATE_USER_REQUEST,\r\n    UPDATE_USER_SUCCESS,\r\n    UPDATE_USER_FAILURE,\r\n} from \"./userTypes\";\r\n\r\nexport interface UserState {\r\n    loading: boolean,\r\n    users: User[],\r\n    error: string\r\n}\r\n\r\nconst initialState: UserState = {\r\n    loading: false,\r\n    users: [],\r\n    error: ''\r\n}\r\n\r\ninterface UserAction {\r\n    type: string,\r\n    payload: string | User\r\n}\r\n\r\nconst userReducer = (state: UserState = initialState, action: UserAction) => {\r\n    switch (action.type) {\r\n        case UPDATE_USER_REQUEST:\r\n        case FETCH_USERS_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n        case FETCH_USERS_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                users: action.payload,\r\n                error: ''\r\n            }\r\n        case FETCH_USERS_FAILURE:\r\n            return {\r\n                loading: false,\r\n                users: [],\r\n                error: action.payload\r\n            }\r\n        case UPDATE_USER_SUCCESS:\r\n            let user = action.payload as User;\r\n            return {\r\n                loading: false,\r\n                error: '',\r\n                users: state.users.map(obj => {\r\n                    if (obj.Id === user.Id) {\r\n                        return action.payload as User;\r\n                    }\r\n                    return obj\r\n                })\r\n            }\r\n        case UPDATE_USER_FAILURE:\r\n            return {\r\n                loading: false,\r\n                users: [],\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return {\r\n                state\r\n            }\r\n    }\r\n}\r\n\r\nexport default userReducer;","import { combineReducers } from \"redux\";\r\nimport userReducer from \"./users/userReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    user: userReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./rootReducer\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(logger, thunk)));\r\nexport default store;\r\n","import React from \"react\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faLinkedin } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst LinkedInIcon = () => {\r\n    return (\r\n        <FontAwesomeIcon icon={faLinkedin} color=\"white\" size=\"2x\" />\r\n    )\r\n}\r\n\r\nexport default LinkedInIcon;","import React from \"react\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst GithubIcon = () => {\r\n    return (\r\n        <FontAwesomeIcon icon={faGithub} color=\"white\" size=\"2x\" />\r\n    )\r\n}\r\n\r\nexport default GithubIcon;","import React from 'react';\nimport UserList from './views/UserList';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport Navbar from 'react-bootstrap/esm/Navbar';\nimport Nav from 'react-bootstrap/esm/Nav';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport LinkedInIcon from './component/LinkedInIcon';\nimport GithubIcon from './component/GithubIcon';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Navbar bg=\"dark\" sticky=\"top\">\n          <Navbar.Brand href=\"/\">\n            <img src={process.env.PUBLIC_URL + '/logo.png'} width=\"50\" />\n          </Navbar.Brand>\n          <Nav className=\"ml-auto\">\n            <Nav.Link href=\"https://www.linkedin.com/in/dhirajsonavane/\" target=\"_blank\">\n              <LinkedInIcon />\n            </Nav.Link>\n            <Nav.Link href=\"https://github.com/dhirajsonavane/ts-layout\" target=\"_blank\">\n              <GithubIcon />\n            </Nav.Link>\n          </Nav>\n        </Navbar>\n        <UserList />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './custom.scss';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport 'react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}